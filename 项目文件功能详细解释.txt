# AI Agent 项目文件架构

```
ai_agent/
│
├── main.py                    # 应用程序入口点，初始化并启动AI Agent
│
├── core/                      # 核心引擎模块
│   ├── __init__.py
│   ├── nlp_processor.py       # 自然语言处理模块，分析用户输入并拆解任务
│   ├── memory_retriever.py    # 任务记忆检索模块，在历史任务中查找相似任务
│   ├── task_executor.py       # 任务执行引擎，负责调度和执行任务
│   └── error_handler.py       # 错误处理模块，捕获、分析和处理执行异常
│
├── interface/                 # 用户交互层
│   ├── __init__.py
│   ├── cli.py                 # 命令行界面，处理用户输入和输出
│   ├── task_display.py        # 任务显示模块，格式化任务列表和状态
│   └── feedback_collector.py  # 用户反馈收集器，获取和记录用户反馈
│
├── services/                  # 功能服务模块
│   ├── __init__.py
│   ├── api_connector.py       # API连接器，管理外部API调用
│   ├── cmd_executor.py        # 命令行执行器，安全执行系统命令
│   └── python_manager.py      # Python脚本管理器，处理Python脚本创建和执行
│
├── data_manager/              # 数据管理模块
│   ├── __init__.py
│   ├── storage.py             # 存储管理器，处理文件读写操作
│   ├── task_recorder.py       # 任务记录器，保存任务执行详情
│   ├── knowledge_base.py      # 知识库管理器，更新和查询任务知识
│   └── log_manager.py         # 日志管理器，维护详细执行日志
│
├── models/                    # 数据模型定义
│   ├── __init__.py
│   ├── task.py                # 任务模型，定义任务和步骤的数据结构
│   ├── execution_result.py    # 执行结果模型，定义成功和错误结果的数据结构
│   └── user_feedback.py       # 用户反馈模型，定义反馈数据结构
│
├── utils/                     # 工具函数
│   ├── __init__.py
│   ├── text_similarity.py     # 文本相似度计算工具
│   ├── id_generator.py        # 唯一ID生成器
│   ├── time_utils.py          # 时间处理工具
│   └── config_loader.py       # 配置加载器
│
├── data/                      # 数据存储目录
│   ├── tasks_records.json     # 任务记录JSON文件
│   ├── task_knowledge_base.json # 任务知识库JSON文件
│   ├── user_feedback.xlsx     # 用户反馈Excel文件
│   ├── logs/                  # 任务执行日志目录
│   │   └── T20250510001_log.txt # 示例任务日志
│   └── scripts/               # 生成的Python脚本目录
│
├── config/                    # 配置文件目录
│   ├── settings.json          # 应用程序配置
│   ├── nlp_config.json        # NLP模块配置
│   └── execution_config.json  # 执行引擎配置
│
└── README.md                  # 项目说明文档
```

## 核心文件功能说明

### 主程序

1. **main.py**
   - 功能：应用程序入口点，初始化各个模块并启动AI Agent
   - 主要功能：
     * 加载配置文件
     * 初始化核心模块
     * 启动命令行界面
     * 处理程序退出和资源清理

### 核心引擎文件

2. **core/nlp_processor.py**
   - 功能：自然语言处理模块
   - 主要功能：
     * `parse_input(text)`: 分析用户输入文本
     * `extract_keywords(text)`: 提取关键词
     * `decompose_task(text)`: 将输入拆解为任务步骤
     * `determine_intent(text)`: 识别用户意图

3. **core/memory_retriever.py**
   - 功能：任务记忆检索模块
   - 主要功能：
     * `search_similar_tasks(keywords)`: 搜索相似历史任务
     * `calculate_similarity(task1, task2)`: 计算任务相似度
     * `extract_task_steps(task_id)`: 提取历史任务步骤
     * `adapt_steps_to_context(steps, context)`: 将历史步骤适应当前上下文

4. **core/task_executor.py**
   - 功能：任务执行引擎
   - 主要功能：
     * `execute_task(task)`: 执行完整任务
     * `execute_step(step)`: 执行单个步骤
     * `monitor_execution(step_id)`: 监控执行状态
     * `handle_timeout(step_id)`: 处理执行超时

5. **core/error_handler.py**
   - 功能：错误处理模块
   - 主要功能：
     * `capture_error(exception, context)`: 捕获执行异常
     * `analyze_error(error)`: 分析错误类型和原因
     * `suggest_solution(error)`: 提供可能的解决方案
     * `format_error_report(error)`: 格式化错误报告

### 交互界面文件

6. **interface/cli.py**
   - 功能：命令行界面
   - 主要功能：
     * `get_user_input()`: 获取用户输入
     * `display_output(text)`: 显示输出信息
     * `display_progress(progress)`: 显示执行进度
     * `get_confirmation(question)`: 获取用户确认

7. **interface/task_display.py**
   - 功能：任务显示模块
   - 主要功能：
     * `format_task_list(tasks)`: 格式化任务列表
     * `format_execution_status(status)`: 格式化执行状态
     * `display_task_details(task)`: 显示任务详细信息
     * `display_similar_task(task)`: 显示相似历史任务

8. **interface/feedback_collector.py**
   - 功能：用户反馈收集器
   - 主要功能：
     * `collect_rating(task_id)`: 收集用户评分
     * `collect_feedback(task_id)`: 收集详细反馈
     * `process_feedback(feedback)`: 处理用户反馈
     * `save_feedback(feedback)`: 保存反馈数据

### 功能服务文件

9. **services/api_connector.py**
   - 功能：API连接器
   - 主要功能：
     * `connect(api_url, auth)`: 连接到API
     * `make_request(endpoint, method, data)`: 发送API请求
     * `handle_response(response)`: 处理API响应
     * `handle_api_error(error)`: 处理API错误

10. **services/cmd_executor.py**
    - 功能：命令行执行器
    - 主要功能：
      * `execute_command(command)`: 执行系统命令
      * `capture_output(process)`: 捕获命令输出
      * `set_timeout(command, timeout)`: 设置执行超时
      * `sanitize_command(command)`: 命令安全处理

11. **services/python_manager.py**
    - 功能：Python脚本管理器
    - 主要功能：
      * `create_script(filename, code)`: 创建Python脚本
      * `execute_script(filename)`: 执行Python脚本
      * `get_script_result(script_id)`: 获取脚本执行结果
      * `cleanup_scripts()`: 清理临时脚本文件

### 数据管理文件

12. **data_manager/storage.py**
    - 功能：存储管理器
    - 主要功能：
      * `save_json(data, filename)`: 保存JSON数据
      * `load_json(filename)`: 加载JSON数据
      * `save_text(text, filename)`: 保存文本文件
      * `load_text(filename)`: 加载文本文件
      * `save_excel(data, filename)`: 保存Excel数据
      * `load_excel(filename)`: 加载Excel数据

13. **data_manager/task_recorder.py**
    - 功能：任务记录器
    - 主要功能：
      * `create_task_record(task)`: 创建新任务记录
      * `update_task_status(task_id, status)`: 更新任务状态
      * `record_step_result(task_id, step_id, result)`: 记录步骤结果
      * `finalize_task_record(task_id)`: 完成任务记录

14. **data_manager/knowledge_base.py**
    - 功能：知识库管理器
    - 主要功能：
      * `update_knowledge_base(task)`: 更新任务知识库
      * `search_knowledge_base(keywords)`: 搜索任务知识库
      * `add_task_pattern(pattern)`: 添加任务模式
      * `optimize_knowledge_base()`: 优化知识库结构

15. **data_manager/log_manager.py**
    - 功能：日志管理器
    - 主要功能：
      * `create_log(task_id)`: 创建任务日志
      * `log_step(task_id, step_info)`: 记录步骤信息
      * `log_error(task_id, error)`: 记录错误信息
      * `finalize_log(task_id)`: 完成任务日志

### 数据模型文件

16. **models/task.py**
    - 功能：任务模型
    - 主要功能：
      * `Task`类：表示完整任务的数据结构
      * `TaskStep`类：表示任务步骤的数据结构
      * 数据验证和转换方法

17. **models/execution_result.py**
    - 功能：执行结果模型
    - 主要功能：
      * `ExecutionResult`类：表示执行结果的数据结构
      * `ErrorResult`类：表示错误结果的数据结构
      * 结果格式化和转换方法

18. **models/user_feedback.py**
    - 功能：用户反馈模型
    - 主要功能：
      * `UserFeedback`类：表示用户反馈的数据结构
      * 反馈数据验证和分析方法

### 工具函数文件

19. **utils/text_similarity.py**
    - 功能：文本相似度计算工具
    - 主要功能：
      * `calculate_keyword_similarity(keywords1, keywords2)`: 计算关键词相似度
      * `calculate_text_similarity(text1, text2)`: 计算文本相似度
      * `extract_n_grams(text)`: 提取N-gram特征

20. **utils/id_generator.py**
    - 功能：唯一ID生成器
    - 主要功能：
      * `generate_task_id()`: 生成任务ID
      * `generate_step_id()`: 生成步骤ID
      * `generate_pattern_id()`: 生成模式ID

21. **utils/time_utils.py**
    - 功能：时间处理工具
    - 主要功能：
      * `get_timestamp()`: 获取当前时间戳
      * `format_time(timestamp)`: 格式化时间
      * `calculate_duration(start, end)`: 计算时间差

22. **utils/config_loader.py**
    - 功能：配置加载器
    - 主要功能：
      * `load_config(filename)`: 加载配置文件
      * `get_config_value(key)`: 获取配置值
      * `update_config(key, value)`: 更新配置

### 配置文件

23. **config/settings.json**
    - 功能：应用程序全局配置
    - 主要配置：
      * 数据存储路径
      * 日志设置
      * 界面设置
      * 系统限制设置

24. **config/nlp_config.json**
    - 功能：NLP模块配置
    - 主要配置：
      * 关键词提取设置
      * 相似度阈值
      * 任务模板配置
      * 语义分析参数

25. **config/execution_config.json**
    - 功能：执行引擎配置
    - 主要配置：
      * 执行超时设置
      * 错误重试策略
      * 资源限制设置
      * 执行环境设置

## 项目流程示意

此文件架构支持以下工作流程：

1. 用户通过`interface/cli.py`输入自然语言指令
2. `core/nlp_processor.py`分析指令并提取关键词
3. `core/memory_retriever.py`在知识库中搜索相似任务
4. 如找到相似任务，提取并调整步骤；否则分解为新任务
5. `interface/task_display.py`展示任务列表供用户确认
6. 用户确认后，`core/task_executor.py`开始执行任务
7. 每个步骤的执行由相应的服务模块处理
8. `data_manager/task_recorder.py`记录执行过程
9. 如出现错误，`core/error_handler.py`处理异常
10. 任务完成后，`interface/feedback_collector.py`收集用户反馈
11. `data_manager/knowledge_base.py`更新任务知识库

